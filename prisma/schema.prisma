// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

enum UserRole {
  ADMIN
  USER
}

enum Gender {
  MALE
  FEMALE
  OTHER
}

model User {
  id            String    @id @default(auto()) @map("_id") @db.ObjectId
  name          String?
  email         String?   @unique
  emailVerified DateTime?
  image         String?
  age           Int?
  weight        Int?
  height        Int?
  gender        Gender?
  role          UserRole  @default(USER)
  accounts      Account[]
  workouts      Workout[]
  createdAt     DateTime  @default(now())
  updatedAt     DateTime  @updatedAt

  @@map("users")
}

enum WorkoutType {
  CARDIO
  RESISTANCE
  MIXED
}

enum WorkoutStatus {
  INPROGRESS
  COMPLETED
}

model Workout {
  id        String        @id @default(auto()) @map("_id") @db.ObjectId
  duration  String?
  intensity String?
  status    WorkoutStatus
  type      WorkoutType
  exercises Exercise[]
  userId    String        @db.ObjectId
  user      User          @relation(fields: [userId], references: [id])
  createdAt DateTime      @default(now())
  updatedAt DateTime      @updatedAt

  @@map("workouts")
}

model Exercise {
  id        String   @id @default(auto()) @map("_id") @db.ObjectId
  name      String
  reps      Int?
  sets      Int?
  weight    Int?
  duration  Int?
  calories  Int?
  workoutId String   @db.ObjectId
  workout   Workout  @relation(fields: [workoutId], references: [id])
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt

  @@index(fields: [workoutId])
  @@map("exercises")
}

model Account {
  id                String  @id @default(auto()) @map("_id") @db.ObjectId
  userId            String  @db.ObjectId
  type              String
  provider          String
  providerAccountId String
  refresh_token     String?
  access_token      String?
  expires_at        Int?
  token_type        String?
  scope             String?
  id_token          String?
  session_state     String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  @@unique([provider, providerAccountId])
  @@map("accounts")
}
